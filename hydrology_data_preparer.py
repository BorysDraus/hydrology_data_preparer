# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HydrologyDataPreparer
                                 A QGIS plugin
 App for load date from difrent source to hydrology format
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-01-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by BULiGL
        email                : borys.draus@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import glob
from qgis.core import QgsProject, Qgis, QgsVectorLayer, QgsProcessingFeedback
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
# Initialize Qt resources from file resources.py
from .resources import *
from qgis._core import QgsWkbTypes, QgsMapLayer, QgsVectorFileWriter, QgsVectorDataProvider, QgsField, QgsRectangle, QgsMapLayerProxyModel, QgsProcessing

from qgis import processing
from .atribute_table_manager import AtibuteTableManager

# Import the code for the DockWidget
from .hydrology_data_preparer_dockwidget import HydrologyDataPreparerDockWidget
import os.path
from os import listdir
from os.path import isfile, join

class HydrologyDataPreparer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HydrologyDataPreparer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Hydrology data preparer')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'HydrologyDataPreparer')
        self.toolbar.setObjectName(u'HydrologyDataPreparer')

        #print "** INITIALIZING HydrologyDataPreparer"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HydrologyDataPreparer', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/hydrology_data_preparer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Load hydrology data'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING HydrologyDataPreparer"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD HydrologyDataPreparer"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Hydrology data preparer'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar



    def selectDirectory(self, QLabel):
        directory_of_SLMN_data = QFileDialog.getExistingDirectory(self.dockwidget, "Open foldrer", "", QFileDialog.ShowDirsOnly)
        QLabel.setText(directory_of_SLMN_data)
        return directory_of_SLMN_data


    def addDataFromDirectory(self):

        directory = str(self.dockwidget.label_slmn_path.text()).replace('\\', '/')
        onlyfiles = [f for f in listdir(directory) if isfile(join(directory, f))]

        # Manipulating line layers
        line_layer = None
        for f in onlyfiles:
            if f.endswith("linie.shp"):
                line_layer = self.iface.addVectorLayer(directory + "/" + f, "", "ogr")

        # Change CRS
        crs = line_layer.crs()
        crs.createFromId(2180)
        line_layer.setCrs(crs)

        # Manipulating dbf file (line_a)
        dbf_file_a = None
        for f in onlyfiles:
            if f.endswith("linie_a.dbf"):
                dbf_file_a = self.iface.addVectorLayer(directory + "/" + f, "", "ogr")


        # Manipulating dbf file (line_t)
        dbf_file_t = None
        for f in onlyfiles:
            if f.endswith("linie_t.dbf"):
                dbf_file_t = self.iface.addVectorLayer(directory + "/" + f, "", "ogr")

        # Join line_a
        result = processing.run("native:joinattributestable",
                       {'INPUT': line_layer, 'FIELD': 'ID',
                        'INPUT_2': dbf_file_a, 'FIELD_2': 'ID',
                        'FIELDS_TO_COPY': [], 'METHOD': 1, 'DISCARD_NONMATCHING': False, 'PREFIX': '',
                        'OUTPUT': 'TEMPORARY_OUTPUT'})
        outputlayer = result['OUTPUT']

        # Join line_t
        result = processing.run("native:joinattributestable",
                       {'INPUT': outputlayer, 'FIELD': 'ID',
                        'INPUT_2': dbf_file_t, 'FIELD_2': 'ID',
                        'FIELDS_TO_COPY': [], 'METHOD': 1, 'DISCARD_NONMATCHING': False, 'PREFIX': '',
                        'OUTPUT': 'TEMPORARY_OUTPUT'})
        outputlayer = result['OUTPUT']

        result = processing.run("native:fixgeometries", {'INPUT': outputlayer, 'OUTPUT': 'memory:'})
        outputlayer = result['OUTPUT']

        join_layer = QgsProject.instance().addMapLayer(outputlayer)
        join_layer.setName("join_layer")


        #
        canvas = self.iface.mapCanvas()
        extent = join_layer.extent()
        canvas.setExtent(extent)
        canvas.refresh()


        AtibuteTableManager.removeDataFrolLayerByValue(self, join_layer, "KOD_2", "WIZURY")

        self.zoomToLayer("join_layer")

    def zoomToLayer(self, layerName):

        layer = QgsProject.instance().mapLayersByName(layerName)[0]

        layer.selectAll();
        box = layer.boundingBoxOfSelected()

        xmin, xmax, ymin, ymax = box.xMinimum(), box.xMaximum(), box.yMinimum(), box.yMaximum()
        xmin -= 100
        xmax += 100
        ymin -= 100
        ymax += 100
        box = QgsRectangle(xmin, ymin, xmax, ymax)
        self.iface.mapCanvas().setExtent(box)
        self.iface.mapCanvas().refresh()

        layer.removeSelection()

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING HydrologyDataPreparer"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = HydrologyDataPreparerDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            # self.dockwidget.pushButton_set_slmn_path.clicked.connect(self.selectSLMNDirectory(self.dockwidget.label_slmn_path))
            self.dockwidget.pushButton_set_slmn_path.clicked.connect(lambda: self.selectDirectory(self.dockwidget.label_slmn_path))

            self.dockwidget.pushButton_set_dsd_path.clicked.connect(lambda: self.selectDirectory(self.dockwidget.label_dsd_path))

            # text =str(self.dockwidget.label_slmn_path.text()).replace('\\', '/')
            self.dockwidget.pushButtonAddLayer.clicked.connect(lambda: self.addDataFromDirectory())


            self.dockwidget.pushButton_zoom.clicked.connect(lambda: self.zoomToLayer('join_layer'))

# pushButton_zoom



# TODO
# 01 Zoom to layer